@page "/Quizz/Start"
@using System.Web
@inject NavigationManager Nav
@inject HttpClient Http

<div class="capitulo-bg py-8 min-h-screen">
    <div class="max-w-xl mx-auto bg-white rounded-2xl shadow-lg p-8">
        <h1 class="text-3xl font-extrabold text-sky-700 text-center mb-8 drop-shadow">📝 Quizz</h1>

        @if (PreguntasFiltradas == null)
        {
            <p class="text-center text-gray-600">Cargando preguntas...</p>
        }
        else if (!PreguntasFiltradas.Any())
        {
            <p class="text-center text-red-600">No hay preguntas disponibles para esos capítulos.</p>
        }
        else
        {
            var actual = PreguntasFiltradas[Indice];

            <div class="mb-8">
                <h2 class="text-2xl font-semibold mb-6 text-gray-800 text-center">
                    <div class="quizz-palabra-centralizada mb-6">
                        <PlayJapanese Texto="@actual.Enunciado" />
                        <span class="quizz-palabra-japonesa">@actual.Enunciado</span>
                    </div>
                </h2>
                <div class="flex flex-col gap-5">
                    @foreach (var opcion in actual.Opciones)
                    {
                        var esSeleccionada = RespuestaSeleccionada == opcion;
                        var esCorrecta = opcion == actual.RespuestaCorrecta;
                        var mostrarCorrecta = YaRespondida && !esSeleccionada && esCorrecta && RespuestaSeleccionada != actual.RespuestaCorrecta;

                        <button class="quizz-opcion-btn
                            @(esSeleccionada
                                ? (esCorrecta ? "quizz-opcion-correcta" : "quizz-opcion-incorrecta")
                                : (mostrarCorrecta ? "quizz-opcion-correcta" : ""))"
                            @onclick="() => SeleccionarRespuesta(opcion)"
                            disabled="@YaRespondida">
                            @opcion
                        </button>
                    }
                </div>
            </div>

            <div class="flex justify-between mb-4">
                <span class="text-gray-600">Pregunta @(Indice + 1) de @PreguntasFiltradas.Count</span>
                <span class="text-gray-600">✅ Correctas: @Correctas</span>
            </div>

            @if (YaRespondida && !EsUltima)
            {
                <div class="mt-6 flex justify-center">
                    <button class="quizz-comenzar-btn"
                            @onclick="SiguientePregunta">
                        Siguiente ➡️
                    </button>
                </div>
            }
            else if (YaRespondida && EsUltima)
            {
                <div class="mt-6 text-center">
                    <p class="text-green-600 font-semibold mb-3 text-xl">🎉 ¡Quizz completado!</p>
                    <button class="quizz-comenzar-btn"
                            @onclick="@(() => Nav.NavigateTo("Quizz"))">
                        Volver al inicio
                    </button>
                </div>
            }
        }
    </div>
</div>

@code {
    private List<PreguntaModel>? TodasLasPreguntas;
    private List<PreguntaModel> PreguntasFiltradas = new();
    private List<int> CapitulosSeleccionados = new();

    private int Indice = 0;
    private string? RespuestaSeleccionada;
    private int Correctas = 0;

    private bool YaRespondida => RespuestaSeleccionada != null;
    private bool EsUltima => Indice >= PreguntasFiltradas.Count - 1;

    protected override async Task OnInitializedAsync()
    {
        var uri = Nav.ToAbsoluteUri(Nav.Uri);
        var query = HttpUtility.ParseQueryString(uri.Query);
        var ids = query["ids"]?.Split(",").Select(id => int.TryParse(id, out var n) ? n : -1).Where(n => n > 0).ToList();

        if (ids is null || ids.Count == 0)
        {
            Nav.NavigateTo("Quizz");
            return;
        }

        CapitulosSeleccionados = ids;

        TodasLasPreguntas = await Http.GetFromJsonAsync<List<PreguntaModel>>("data/Preguntas.json");
        PreguntasFiltradas = TodasLasPreguntas?
            .Where(p => CapitulosSeleccionados.Contains(p.Capitulo))
            .OrderBy(_ => Guid.NewGuid()) // aleatorizar
            .ToList() ?? new();
    }

    private void SeleccionarRespuesta(string opcion)
    {
        if (YaRespondida) return;

        RespuestaSeleccionada = opcion;

        if (RespuestaSeleccionada == PreguntasFiltradas[Indice].RespuestaCorrecta)
            Correctas++;
    }

    private void SiguientePregunta()
    {
        if (!EsUltima)
        {
            Indice++;
            RespuestaSeleccionada = null;
        }
    }
}