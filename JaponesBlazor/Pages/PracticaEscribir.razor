@page "/Practica/Escribir"
@using JaponesBlazor.Component
@inject HttpClient Http
@inject NavigationManager Nav
@inject IJSRuntime JS
@using System.Web
@using JaponesBlazor.Models

@{
    var inputClass = "japones-input";
    EjemploModel? actual = null;
    if (Palabras != null && Palabras.Count > 0 && Indice < Palabras.Count)
    {
        actual = Palabras[Indice];
        if (YaRespondida)
            inputClass += RespuestaUsuario == actual.EjemploJap ? " input-correcto" : " input-incorrecto";
    }
}

<div class="juego-escribir-container">
    <div class="header-bar mb-8">
        <BackButton />
         <h2 class="juego-escribir-titulo">Escribe la palabra en japonés</h2>
        <div class="header-bar-space"></div>
    </div>

    @if (Palabras == null)
    {
        <p class="text-center text-gray-600">Cargando palabras...</p>
    }
    else if (!Palabras.Any())
    {
        <p class="text-center text-red-600">No hay palabras disponibles.</p>
    }
    else
    {
        actual = Palabras[Indice];

        <div class="juego-progreso">
            <span>Palabra @(Indice + 1) de @Palabras.Count</span>
            <span>✅ Correctas: @Correctas</span>
        </div>

        <div class="juego-escribir-palabra">@actual.EjemploEsp</div>
        <div class="juego-escribir-inputbox" style="flex-direction:column;align-items:center;">
            <textarea
                class="@inputClass"
                @ref="KanaInputRef"
                @oninput="@(async e => { await OnKanaInput(e); await JS.InvokeVoidAsync("autoGrowTextarea", KanaInputRef); })"
                disabled="@YaRespondida"
                @bind="RespuestaUsuario"
                lang="ja"
                autocomplete="off"
                rows="1"
                placeholder="Romanji - a=あ A=ア" />

            @if (YaRespondida && RespuestaUsuario != actual.EjemploJap)
            {
                <div class="respuesta-incorrecta-text">
                    <PlayJapanese Texto="@actual.EjemploJap" />
                    <span class="text-red font-bold ms-2" style="font-size:1.5rem;">@actual.EjemploJap</span>
                </div>
            }
            @if (YaRespondida && RespuestaUsuario == actual.EjemploJap)
            {
                <div class="respuesta-correcta-text">
                    <span class="icon-check">✅</span>
                    <span>¡Correcto!</span>
                </div>
            }

            <button type="button"
                    class="quizz-comenzar-btn"
                    style="margin-bottom:0.7rem; margin-top:0.2rem; font-size:1rem; padding:0.4em 1.2em;"
                    @onclick="ToggleTeclado"
                    disabled="@YaRespondida">
                @(TecladoVisible ? "Ocultar teclado japonés" : "Mostrar teclado japonés")
            </button>

            @if (TecladoVisible && !YaRespondida)
            {
                <TecladoJapones @bind-Valor="RespuestaUsuario"
                                Disabled="@YaRespondida"
                                TextAreaClass="@inputClass" />
            }
        </div>

        @if (YaRespondida && !EsUltima)
        {
            <div class="flex justify-center gap-4">
                @if (RespuestaUsuario != actual.EjemploJap)
                {
                    <button class="quizz-comenzar-btn" @onclick="ReintentarPalabra">
                        Reintentar
                    </button>
                }
                <button class="quizz-comenzar-btn" @onclick="SiguientePalabra">
                    Siguiente
                </button>
            </div>
        }
        else if (YaRespondida && EsUltima)
        {
            <div class="text-center">
                <p class="text-green-600 font-semibold mb-3 text-xl">🎉 ¡Práctica completada!</p>
                <button class="quizz-comenzar-btn" @onclick="@(() => Indice = 0)">
                    Volver a empezar
                </button>
            </div>
        }
        else
        {
            <div class="flex justify-center">
                <button class="quizz-comenzar-btn" @onclick="VerificarRespuesta" disabled="@YaRespondida">
                    Verificar
                </button>
            </div>
        }
    }
</div>

@code {
    private List<int> CategoriasSeleccionadas = new();
    private List<int> CapitulosSeleccionados = new();
    private List<EjemploModel>? Palabras;
    private int Indice = 0;
    private string RespuestaUsuario = "";
    private int Correctas = 0;
    private bool YaRespondida = false;
    private bool EsUltima => Indice >= (Palabras?.Count ?? 0) - 1;

    private bool TecladoVisible = false;
    private bool TecladoVisibleAntesDeResponder = false;

    private ElementReference KanaInputRef;

    protected override async Task OnInitializedAsync()
    {
        var uri = Nav.ToAbsoluteUri(Nav.Uri);
        var query = HttpUtility.ParseQueryString(uri.Query);
        var ids = query["ids"]?.Split(",").Select(id => int.TryParse(id, out var n) ? n : -1).Where(n => n > 0).ToList();

        var catsJson = query["cats"];
        if (!string.IsNullOrEmpty(catsJson))
        {
            try
            {
                CategoriasSeleccionadas = System.Text.Json.JsonSerializer.Deserialize<List<int>>(catsJson) ?? new();
            }
            catch
            {
                CategoriasSeleccionadas = System.Text.Json.JsonSerializer.Deserialize<List<int>>(Uri.UnescapeDataString(catsJson)) ?? new();
            }
        }

        if (ids is null || ids.Count == 0)
        {
            throw new InvalidOperationException("No se han seleccionado capítulos válidos.");
        }

        CapitulosSeleccionados = ids;

        var vocabularioList = await Http.GetFromJsonAsync<List<VocabularioModel>>("data/Vocabulario.json");
        var gramaticaList= await Http.GetFromJsonAsync<List<GramaticaModel>>("data/Gramatica.json");
        List<VocabularioModel> palabrasVocabulario = vocabularioList.Where(p => CapitulosSeleccionados.Contains(p.CapituloId) && CategoriasSeleccionadas.Contains((int)p.Categoria)).ToList();
        List<EjemploModel> gramaticaModels = CategoriasSeleccionadas.Contains((int)CategoriaEnum.Gramatica) ? gramaticaList.Where(p => CapitulosSeleccionados.Contains(p.CapituloId)).SelectMany(x=>x.Explicaciones).SelectMany(x=>x.Ejemplos).ToList() : new ();
        List<EjemploModel> palabras = gramaticaModels.Union(palabrasVocabulario.Select(x => new EjemploModel {EjemploEsp = x.Esp, EjemploJap = x.Jap })).ToList();
        var rng = new Random();
        Palabras = palabras.OrderBy(x => rng.Next()).ToList();
    }

    private void ToggleTeclado()
    {
        TecladoVisible = !TecladoVisible;
    }

    private void SiguientePalabra()
    {
        if (!EsUltima)
        {
            Indice++;
            RespuestaUsuario = "";
            YaRespondida = false;
            TecladoVisible = TecladoVisibleAntesDeResponder;
        }
    }

    private void ReintentarPalabra()
    {
        RespuestaUsuario = "";
        YaRespondida = false;
        TecladoVisible = TecladoVisibleAntesDeResponder;
    }

    // Al verificar, compara el kana
    private void VerificarRespuesta()
    {
        YaRespondida = true;
        if (Palabras![Indice].EjemploJap == RespuestaUsuario)
            Correctas++;
        TecladoVisibleAntesDeResponder = TecladoVisible;
        TecladoVisible = false;
    }

    private async Task OnKanaInput(ChangeEventArgs e)
    {
        // Llama a la función JS para procesar el input
        RespuestaUsuario = await JS.InvokeAsync<string>("kanaInputProcess", KanaInputRef);
        StateHasChanged();
    }
}